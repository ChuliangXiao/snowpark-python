from typing import Any, Iterable, Optional, Union

import snowflake.snowpark
from snowflake.snowpark._internal.analyzer.expression import CaseWhen, Expression
from snowflake.snowpark._internal.type_utils import (
    ColumnOrLiteral as ColumnOrLiteral,
    ColumnOrLiteralStr as ColumnOrLiteralStr,
    ColumnOrName as ColumnOrName,
    ColumnOrSqlExpr as ColumnOrSqlExpr,
)
from snowflake.snowpark.types import DataType as DataType
from snowflake.snowpark.window import WindowSpec as WindowSpec

class Column:
    expression: Any
    def __init__(self, expr: Union[str, Expression]) -> None: ...
    def __getitem__(self, field: Union[str, int]) -> Column: ...
    def __eq__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __ne__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __gt__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __lt__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __ge__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __le__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __add__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __radd__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __sub__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __rsub__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __mul__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __rmul__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __truediv__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __rtruediv__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __mod__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __rmod__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __pow__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __rpow__(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __bool__(self) -> bool: ...
    def in_(
        self,
        *vals: Union[
            ColumnOrLiteral, Iterable[ColumnOrLiteral], snowflake.snowpark.DataFrame
        ]
    ) -> Column: ...
    def between(
        self,
        lower_bound: Union[ColumnOrLiteral, Expression],
        upper_bound: Union[ColumnOrLiteral, Expression],
    ) -> Column: ...
    def bitand(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def bitor(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def bitxor(self, other: Union[ColumnOrLiteral, Expression]) -> Column: ...
    def __neg__(self) -> Column: ...
    def equal_null(self, other: Column) -> Column: ...
    def equal_nan(self) -> Column: ...
    def is_null(self) -> Column: ...
    def is_not_null(self) -> Column: ...
    def __and__(self, other: Column) -> Column: ...
    def __rand__(self, other: Column) -> Column: ...
    def __or__(self, other: Column) -> Column: ...
    def __ror__(self, other: Column) -> Column: ...
    def __invert__(self) -> Column: ...
    def cast(self, to: Union[str, DataType]) -> Column: ...
    def try_cast(self, to: DataType) -> Column: ...
    def desc(self) -> Column: ...
    def desc_nulls_first(self) -> Column: ...
    def desc_nulls_last(self) -> Column: ...
    def asc(self) -> Column: ...
    def asc_nulls_first(self) -> Column: ...
    def asc_nulls_last(self) -> Column: ...
    def like(self, pattern: ColumnOrLiteralStr) -> Column: ...
    def regexp(self, pattern: ColumnOrLiteralStr) -> Column: ...
    def startswith(self, other: ColumnOrLiteralStr) -> Column: ...
    def endswith(self, other: ColumnOrLiteralStr) -> Column: ...
    def substr(
        self, start_pos: Union[Column, int], length: Union[Column, int]
    ) -> Column: ...
    def collate(self, collation_spec: str) -> Column: ...
    def get_name(self) -> Optional[str]: ...
    def as_(self, alias: str) -> Column: ...
    def alias(self, alias: str) -> Column: ...
    def name(self, alias: str) -> Column: ...
    def over(self, window: Optional[WindowSpec] = ...) -> Column: ...
    def within_group(
        self, *cols: Union[ColumnOrName, Iterable[ColumnOrName]]
    ) -> Column: ...
    isin: Any
    astype: Any
    rlike: Any
    substring: Any
    bitwiseAnd: Any
    bitwiseOR: Any
    bitwiseXOR: Any
    isNotNull: Any
    isNull: Any
    eqNullSafe: Any
    getName: Any

class CaseExpr(Column):
    def __init__(self, expr: CaseWhen) -> None: ...
    def when(
        self, condition: ColumnOrSqlExpr, value: Union[ColumnOrLiteral]
    ) -> CaseExpr: ...
    def otherwise(self, value: Union[ColumnOrLiteral]) -> CaseExpr: ...
    else_: Any
