from typing import Any, Callable, List, Tuple, Union

from snowflake.snowpark._internal.analyzer.expression import Expression as Expression
from snowflake.snowpark._internal.type_utils import ColumnOrName as ColumnOrName
from snowflake.snowpark.column import Column
from snowflake.snowpark.dataframe import DataFrame

INVALID_SF_IDENTIFIER_CHARS: Any

class _GroupType:
    def to_string(self) -> str: ...

class _GroupByType(_GroupType): ...
class _CubeType(_GroupType): ...
class _RollupType(_GroupType): ...

class _PivotType(_GroupType):
    pivot_col: Any
    values: Any
    def __init__(self, pivot_col: Expression, values: List[Expression]) -> None: ...

class GroupingSets:
    def __init__(self, *sets: Union[Column, List[Column]]) -> None: ...

class RelationalGroupedDataFrame:
    def __init__(
        self, df: DataFrame, grouping_exprs: List[Expression], group_type: _GroupType
    ) -> None: ...
    def agg(self, exprs: List[Union[Column, Tuple[Column, str]]]) -> DataFrame: ...
    def avg(self, *cols: ColumnOrName) -> DataFrame: ...
    def mean(self, *cols: ColumnOrName) -> DataFrame: ...
    def sum(self, *cols: ColumnOrName) -> DataFrame: ...
    def median(self, *cols: ColumnOrName) -> DataFrame: ...
    def min(self, *cols: ColumnOrName) -> DataFrame: ...
    def max(self, *cols: ColumnOrName) -> DataFrame: ...
    def count(self) -> DataFrame: ...
    def builtin(self, agg_name: str) -> Callable: ...
