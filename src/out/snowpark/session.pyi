from types import ModuleType
from typing import Any, Dict, Iterable, List, Optional, Tuple, Union

from snowflake.connector import SnowflakeConnection as SnowflakeConnection
from snowflake.connector.options import pandas
from snowflake.snowpark._internal.server_connection import ServerConnection
from snowflake.snowpark._internal.type_utils import ColumnOrName as ColumnOrName
from snowflake.snowpark.dataframe import DataFrame
from snowflake.snowpark.dataframe_reader import DataFrameReader
from snowflake.snowpark.file_operation import FileOperation
from snowflake.snowpark.query_history import QueryHistory
from snowflake.snowpark.stored_procedure import StoredProcedureRegistration
from snowflake.snowpark.table import Table
from snowflake.snowpark.types import StructType
from snowflake.snowpark.udf import UDFRegistration

logger: Any

class Session:
    class SessionBuilder:
        def __init__(self) -> None: ...
        def config(
            self, key: str, value: Union[int, str]
        ) -> Session.SessionBuilder: ...
        def configs(
            self, options: Dict[str, Union[int, str]]
        ) -> Session.SessionBuilder: ...
        def create(self) -> Session: ...
        def __get__(self, obj, objtype: Any | None = ...): ...
    builder: SessionBuilder
    def __init__(self, conn: ServerConnection) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
    def close(self) -> None: ...
    def cancel_all(self) -> None: ...
    def get_imports(self) -> List[str]: ...
    def add_import(self, path: str, import_path: Optional[str] = ...) -> None: ...
    def remove_import(self, path: str) -> None: ...
    def clear_imports(self) -> None: ...
    def get_packages(self) -> Dict[str, str]: ...
    def add_packages(
        self, *packages: Union[str, ModuleType, Iterable[Union[str, ModuleType]]]
    ) -> None: ...
    def remove_package(self, package: str) -> None: ...
    def clear_packages(self) -> None: ...
    def add_requirements(self, file_path: str) -> None: ...
    @property
    def query_tag(self) -> Optional[str]: ...
    @query_tag.setter
    def query_tag(self, tag: str) -> None: ...
    def table(self, name: Union[str, Iterable[str]]) -> Table: ...
    def table_function(
        self,
        func_name: Union[str, List[str]],
        *func_arguments: ColumnOrName,
        **func_named_arguments: ColumnOrName
    ) -> DataFrame: ...
    def sql(self, query: str) -> DataFrame: ...
    @property
    def read(self) -> DataFrameReader: ...
    def get_session_stage(self) -> str: ...
    def write_pandas(
        self,
        pd: pandas.DataFrame,
        table_name: str,
        *,
        database: Optional[str] = ...,
        schema: Optional[str] = ...,
        chunk_size: Optional[int] = ...,
        compression: str = ...,
        on_error: str = ...,
        parallel: int = ...,
        quote_identifiers: bool = ...,
        auto_create_table: bool = ...,
        create_temp_table: bool = ...
    ) -> DataFrame: ...
    def create_dataframe(
        self,
        data: Union[List, Tuple, pandas.DataFrame],
        schema: Optional[Union[StructType, List[str]]] = ...,
    ) -> DataFrame: ...
    def range(
        self, start: int, end: Optional[int] = ..., step: int = ...
    ) -> DataFrame: ...
    def get_current_database(self, unquoted: bool = ...) -> Optional[str]: ...
    def get_current_schema(self, unquoted: bool = ...) -> Optional[str]: ...
    def get_fully_qualified_current_schema(self) -> str: ...
    def get_current_warehouse(self, unquoted: bool = ...) -> Optional[str]: ...
    def get_current_role(self, unquoted: bool = ...) -> Optional[str]: ...
    def use_database(self, database: str) -> None: ...
    def use_schema(self, schema: str) -> None: ...
    def use_warehouse(self, warehouse: str) -> None: ...
    def use_role(self, role: str) -> None: ...
    @property
    def telemetry_enabled(self): ...
    @telemetry_enabled.setter
    def telemetry_enabled(self, value) -> None: ...
    @property
    def file(self) -> FileOperation: ...
    @property
    def udf(self) -> UDFRegistration: ...
    @property
    def sproc(self) -> StoredProcedureRegistration: ...
    def call(self, sproc_name: str, *args: Any) -> Any: ...
    def flatten(
        self,
        input: ColumnOrName,
        path: Optional[str] = ...,
        outer: bool = ...,
        recursive: bool = ...,
        mode: str = ...,
    ) -> DataFrame: ...
    def query_history(self) -> QueryHistory: ...
    createDataFrame: Any
