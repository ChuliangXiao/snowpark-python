from typing import Any, Iterable, List, Optional, TypeVar, Union

from snowflake.connector.options import pandas

class DataType:
    @property
    def type_name(self) -> str: ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class NullType(DataType): ...
class _AtomicType(DataType): ...
class BinaryType(_AtomicType): ...
class BooleanType(_AtomicType): ...
class DateType(_AtomicType): ...
class StringType(_AtomicType): ...
class _NumericType(_AtomicType): ...
class TimestampType(_AtomicType): ...
class TimeType(_AtomicType): ...
class _IntegralType(_NumericType): ...
class _FractionalType(_NumericType): ...
class ByteType(_IntegralType): ...
class ShortType(_IntegralType): ...
class IntegerType(_IntegralType): ...
class LongType(_IntegralType): ...
class FloatType(_FractionalType): ...
class DoubleType(_FractionalType): ...

class DecimalType(_FractionalType):
    precision: Any
    scale: Any
    def __init__(self, precision: int = ..., scale: int = ...) -> None: ...
    @property
    def type_name(self) -> str: ...

class ArrayType(DataType):
    element_type: Any
    def __init__(self, element_type: DataType = ...) -> None: ...
    @property
    def type_name(self) -> str: ...

class MapType(DataType):
    key_type: Any
    value_type: Any
    def __init__(
        self, key_type: DataType = ..., value_type: DataType = ...
    ) -> None: ...
    @property
    def type_name(self) -> str: ...

class ColumnIdentifier:
    normalized_name: Any
    def __init__(self, normalized_name: str) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def quoted_name(self) -> str: ...
    def __eq__(self, other): ...

class StructField:
    column_identifier: Any
    datatype: Any
    nullable: Any
    def __init__(
        self,
        column_identifier: Union[ColumnIdentifier, str],
        datatype: DataType,
        nullable: bool = ...,
    ) -> None: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, n: str) -> None: ...
    def __eq__(self, other): ...

class StructType(DataType):
    fields: Any
    def __init__(self, fields: List[StructField]) -> None: ...
    @property
    def type_name(self) -> str: ...
    @property
    def names(self) -> List[str]: ...

class VariantType(DataType): ...
class GeographyType(DataType): ...
class _PandasType(DataType): ...

class PandasSeriesType(_PandasType):
    element_type: Any
    def __init__(self, element_type: Optional[DataType]) -> None: ...

class PandasDataFrameType(_PandasType):
    col_types: Any
    def __init__(self, col_types: Iterable[DataType]) -> None: ...

Variant = TypeVar("Variant")
Geography = TypeVar("Geography")

class PandasSeries(pandas.Series): ...
class PandasDataFrame(pandas.DataFrame): ...
