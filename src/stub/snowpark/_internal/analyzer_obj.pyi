from typing import Any, Optional

from snowflake.snowpark._internal.analyzer.snowflake_plan import SnowflakePlan
from snowflake.snowpark._internal.sp_expressions import (
    AggregateFunction as SPAggregateFunction,
    Expression as SPExpression,
)

ARRAY_BIND_THRESHOLD: int

class Analyzer:
    session: Any
    plan_builder: Any
    package: Any
    generated_alias_maps: Any
    subquery_plans: Any
    alias_maps_to_use: Any
    def __init__(self, session) -> None: ...
    def analyze(self, expr) -> str: ...
    def table_function_expression_extractor(self, expr): ...
    def leaf_expression_extractor(self, expr) -> None: ...
    def string_to_trim_expression_extractor(self, expr) -> None: ...
    def complex_type_merging_expressing_extractor(self, expr) -> None: ...
    def ternary_expression_extractor(self, expr) -> None: ...
    def unary_expression_extractor(self, expr) -> Optional[str]: ...
    def binary_operator_extractor(self, expr): ...
    def aggregate_extractor(self, expr): ...
    def aggr_extractor_convert_expr(
        self, expr: SPAggregateFunction, is_distinct: bool
    ) -> str: ...
    def grouping_extractor(self, expr: SPExpression): ...
    def window_frame_boundary(self, offset: str) -> str: ...
    def to_sql_avoid_offset(self, expr: SPExpression) -> str: ...
    def resolve(self, logical_plan) -> SnowflakePlan: ...
    def do_resolve(self, logical_plan, is_lazy_mode: bool = ...): ...
    def do_resolve_inner(self, logical_plan, resolved_children) -> SnowflakePlan: ...
