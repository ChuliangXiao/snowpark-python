from typing import Any, List

class AbstractDataType: ...

class DataType(AbstractDataType):
    @property
    def type_name(self): ...
    @property
    def simple_string(self): ...
    @property
    def sql(self): ...

class AtomicType(DataType): ...

class ArrayType(DataType):
    element_type: Any
    contains_null: Any
    def __init__(self, element_type: DataType, contains_null: bool = ...) -> None: ...

class MapType(DataType):
    key_type: Any
    value_type: Any
    value_contains_null: Any
    def __init__(
        self, key_type: DataType, value_type: DataType, value_contains_null: bool = ...
    ) -> None: ...

class NullType(DataType): ...

class StructType(DataType):
    fields: Any
    def __init__(self, fields: List[StructField]) -> None: ...
    @property
    def type_name(self) -> str: ...
    @property
    def names(self): ...

class StructField:
    name: Any
    datatype: Any
    nullable: Any
    metadata: Any
    def __init__(
        self,
        name: str,
        datatype: DataType,
        nullable: bool = ...,
        metadata: Any | None = ...,
    ) -> None: ...
    def __eq__(self, obj): ...

class VariantType(DataType):
    @property
    def sql(self): ...
    @property
    def simple_string(self): ...
    @property
    def catalog_string(self): ...

class GeographyType(DataType):
    element_type: Any
    def __init__(self, element_type: DataType) -> None: ...
    @property
    def type_name(self) -> str: ...
    @property
    def simple_string(self) -> str: ...
    @property
    def sql(self) -> str: ...

class BooleanType(AtomicType): ...
class StringType(AtomicType): ...
class NumericType(AtomicType): ...
class DateType(AtomicType): ...
class TimestampType(AtomicType): ...
class TimeType(DataType): ...
class BinaryType(AtomicType): ...
class IntegralType(NumericType): ...
class FractionalType(NumericType): ...
class ShortType(IntegralType): ...
class ByteType(IntegralType): ...
class IntegerType(IntegralType): ...
class LongType(IntegralType): ...
class FloatType(FractionalType): ...
class DoubleType(FractionalType): ...

class DecimalType(FractionalType):
    MAX_PRECISION: int
    MAX_SCALE: int
    precision: Any
    scale: Any
    def __init__(self, precision: int = ..., scale: int = ...) -> None: ...
    @property
    def type_name(self): ...
