from collections import UserDict
from typing import Dict, List, Optional, Union

import snowflake.snowpark

class PutResult(UserDict):
    def __init__(self, data: Dict[str, Union[str, int]]) -> None: ...
    @property
    def source(self) -> str: ...
    @property
    def target(self) -> str: ...
    @property
    def source_size(self) -> int: ...
    @property
    def target_size(self) -> int: ...
    @property
    def source_compression(self) -> str: ...
    @property
    def target_compression(self) -> str: ...
    @property
    def status(self) -> str: ...
    @property
    def message(self) -> str: ...

class GetResult(UserDict):
    def __init__(self, data: Dict[str, Union[str, int]]) -> None: ...
    @property
    def file(self) -> str: ...
    @property
    def size(self) -> int: ...
    @property
    def status(self) -> str: ...
    @property
    def message(self) -> str: ...

class FileOperation:
    def __init__(self, session: snowflake.snowpark.Session) -> None: ...
    def put(
        self,
        local_file_name: str,
        stage_location: str,
        *,
        parallel: int = ...,
        auto_compress: bool = ...,
        source_compression: str = ...,
        overwrite: bool = ...
    ) -> List[PutResult]: ...
    def get(
        self,
        stage_location: str,
        target_directory: str,
        *,
        parallel: int = ...,
        pattern: Optional[str] = ...
    ) -> List[GetResult]: ...
