from typing import Any, Callable, List, Tuple, Union

from snowflake.snowpark._internal.sp_expressions import Expression as SPExpression
from snowflake.snowpark._internal.sp_types.types_package import (
    ColumnOrName as ColumnOrName,
)
from snowflake.snowpark.column import Column
from snowflake.snowpark.dataframe import DataFrame

class _GroupType:
    def to_string(self) -> str: ...

class _GroupByType(_GroupType): ...
class _CubeType(_GroupType): ...
class _RollupType(_GroupType): ...

class _PivotType(_GroupType):
    pivot_col: Any
    values: Any
    def __init__(self, pivot_col: SPExpression, values: List[SPExpression]) -> None: ...

class GroupingSets:
    to_expression: Any
    def __init__(self, *sets: Union[Column, List[Column]]) -> None: ...

class RelationalGroupedDataFrame:
    df: Any
    grouping_exprs: Any
    group_type: Any
    def __init__(
        self, df, grouping_exprs: List[SPExpression], group_type: _GroupType
    ) -> None: ...
    def agg(self, exprs: List[Union[Column, Tuple[Column, str]]]) -> DataFrame: ...
    def avg(self, *cols: ColumnOrName) -> DataFrame: ...
    def mean(self, *cols: ColumnOrName) -> DataFrame: ...
    def sum(self, *cols: ColumnOrName) -> DataFrame: ...
    def median(self, *cols: ColumnOrName) -> DataFrame: ...
    def min(self, *cols: ColumnOrName) -> DataFrame: ...
    def max(self, *cols: ColumnOrName) -> DataFrame: ...
    def count(self) -> DataFrame: ...
    def builtin(self, agg_name: str) -> Callable: ...
